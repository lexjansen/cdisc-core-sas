/**

@param cache_path - required - Relative path to cache files containing pre loaded metadata and rules
@param pool_size - required - Number of parallel processes for validation. The default is 10.
@param data - optional - Path to directory containing data files
@param dataset_path - optional - Absolute path to dataset file (multiple allowed)
@param log_level - required - Sets log level for engine logs, logs are disabled by default. (default: disabled)
       Allowed values: "info", "debug", "error", "critical", "disabled", "warn".
@param report_template - required - File path of report template to use for excel output
@param standard - required - CDISC standard to validate against
@param version - required - Standard version to validate against
@param controlled_terminology_package - optional - Controlled terminology package to validate against (multiple allowed)
@param output - - Report output file destination
@param output_format - optional - Output file format.  The default is XLSX. (not case-sensitive, multiple allowed)
@param raw_report - required - Report in a raw format as it is generated by the engine (0/1). This flag must be used only with output_format=JSON. Default is 0.
@param define_version - optional - Define-XML version used for validation
@param data_format - required - Format in which data files are presented. Defaults to XPT
@param define_xml_path - optional - Path to Define-XML
@param whodrug - optional - Path to directory with WHODrug dictionary files
@param meddra - optional - Path to directory with MedDRA dictionary files
@param rules - optional - Rule core id. ex: CORE-000001. Can be specified multiple times.

**/

%macro core_validate_data(
  cache_path = %sysfunc(sysget(CORE_PATH))/resources/cache,
  pool_size = 10,
  data =,
  dataset_path =,
  log_level = disabled,
  report_template = %sysfunc(sysget(CORE_PATH))/resources/templates/report-template.xlsx,
  standard =,
  version =,
  controlled_terminology_package =,
  output =,
  output_format = XLSX,
  raw_report = 0,
  define_version =,
  data_format = XPT,
  define_xml_path =,
  whodrug =,
  meddra =,
  rules =
  ) / minoperator;

  %local
    i
    _Missing
    _RequiredParameters
    _Parameter
    _Directories
    _Directory
    _Dataset
    _Format
    ;

  %******************************************************************************;
  %* Parameter checks                                                           *;
  %******************************************************************************;

  %* Check for missing parameters;
  %let _Missing=;
  %let _RequiredParameters=cache_path pool_size log_level report_template standard version output_format output raw_report data_format;
  %do i=1 %to %sysfunc(countw(&_RequiredParameters));
     %let _Parameter=%scan(&_RequiredParameters, &i);
     %if %sysevalf(%superq(&_Parameter)=, boolean) %then %let _Missing = &_Missing &_Parameter;
  %end;

  %if %length(&_Missing) gt 0
    %then %do;
      %put ERR%str(OR): [&sysmacroname] Required macro parameter(s) missing: &_Missing..;
      %goto exit_macro;
    %end;

  %* Exactly one of the DATA and DATASET_PATH  parameters needs to be specified;
  %if %sysevalf(%superq(data)=, boolean) eq 0 and %sysevalf(%superq(dataset_path)=, boolean) eq 0
    %then %do;
      %put ERR%str(OR): [&sysmacroname] Macro parameters data and dataset_path cannot be specified both.;
      %goto exit_macro;
    %end;

  %if %sysevalf(%superq(data)=, boolean) and %sysevalf(%superq(dataset_path)=, boolean) 
    %then %do;
      %put ERR%str(OR): [&sysmacroname] Macro parameters data and dataset_path cannot be both missing.;
      %goto exit_macro;
    %end;

  %* Check dataset_path;
  %if %sysevalf(%superq(dataset_path)=, boolean)=0 %then %do;
    %let i=1;
    %let _Dataset=%scan(&dataset_path, &i, %str(,;));
    %do %while (%length(&_Dataset));    
      %if not %sysfunc(fileexist(&_Dataset)) %then %do;
        %put ERR%str(OR): [&sysmacroname] Dataset &_Dataset in dataset_path parameter does not exist.;
        %goto exit_macro;
      %end;  
      %let i = %eval(&i + 1);
      %let _Dataset=%scan(&dataset_path, &i, %str(,;));
    %end;
  %end;  

  %* Check define_xml_path;
  %if %sysevalf(%superq(define_xml_path)=, boolean)=0 %then %do;
    %if not %sysfunc(fileexist(&define_xml_path)) %then %do;
      %put ERR%str(OR): [&sysmacroname] File &=define_xml_path does not exist.;
      %goto exit_macro;
    %end;  
  %end;  
  
  %* Check directories;
  %let _Directories=cache_path data whodrug meddra;
  %do i=1 %to %sysfunc(countw(&_Directories));
    %let _Directory=%scan(&_Directories, &i);
    %if %sysevalf(%superq(&_Directory)=, boolean)=0 %then %do;
      %if %direxist(&&&_Directory)=0 %then %do;
        %put ERR%str(OR): [&sysmacroname] Path &&&_Directory is not a directory.;
        %goto exit_macro;
      %end;  
    %end;
  %end;

  %* Check log_level;
  %let log_level = %lowcase(&log_level);
  %if not(&log_level in (info debug error critical disabled warn)) %then %do;
    %put ERR%str(OR): [&sysmacroname] Macro parameter &=log_level must be one of 'info', 'debug', 'error', 'critical', 'disabled', 'warn'.;
    %goto exit_macro;
  %end; 

  %* Check data_format;
  %let _data_format = %lowcase(&data_format);
  %if not(&_data_format in (xpt)) %then %do;
    %put ERR%str(OR): [&sysmacroname] Macro parameter &=data_format must be 'XPT'.;
    %goto exit_macro;
  %end; 

  %* Check output_format;
  %if %sysevalf(%superq(output_format)=, boolean)=0 %then %do;
    %let i=1;
    %let _Format=%scan(&output_format, &i, %str(,;));
    %do %while (%length(&_Format));    
      %if not(%upcase(&_Format) in (JSON XLSX)) %then %do;
        %put ERR%str(OR): [&sysmacroname] Macro parameter &=output_format value(s) must be one of 'JSON', 'XLSX'.;
        %goto exit_macro;
      %end;  
      %let i = %eval(&i + 1);
      %let _Format=%scan(&output_format, &i, %str(,;));
    %end;
  %end;  
   
  %* Check raw_report;
  %if not(&raw_report in (0 1)) %then %do;
    %put ERR%str(OR): [&sysmacroname] Macro parameter &=raw_report must be 0 or 1.;
    %goto exit_macro;
  %end; 
   
  %******************************************************************************;
  %* End of parameter checks                                                    *;
  %******************************************************************************;
  
  %if %sysevalf(%superq(rules)=, boolean) eq 0 %then %do;
    %let rules = %sysfunc(dequote(&rules));
  %end;
  
  data _null_;
    message = core_validate_data("&cache_path", &pool_size, "&data", "&dataset_path", "&log_level", "&report_template", "&standard", "&version", "&output",  "&output_format",  &raw_report, "&controlled_terminology_package" , "&define_version", "&data_format", "&define_xml_path", "&whodrug", "&meddra", "&rules");
    if not missing(message) then putlog "ERR" "OR: " message;
  run;
  
  %exit_macro:

%mend core_validate_data;
